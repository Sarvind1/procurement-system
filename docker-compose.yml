version: '3.8'

services:
  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: procurement-postgres
    environment:
      POSTGRES_DB: ${POSTGRES_DB:-procurement}
      POSTGRES_USER: ${POSTGRES_USER:-postgres}
      POSTGRES_PASSWORD: ${POSTGRES_PASSWORD:-postgres}
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
    networks:
      - procurement-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 30s
      timeout: 10s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: procurement-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - procurement-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # MinIO Object Storage
  minio:
    image: minio/minio:latest
    container_name: procurement-minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: ${MINIO_ACCESS_KEY:-minioadmin}
      MINIO_ROOT_PASSWORD: ${MINIO_SECRET_KEY:-minioadmin123}
    ports:
      - "9000:9000"
      - "9001:9001"
    volumes:
      - minio_data:/data
    networks:
      - procurement-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 10s
      retries: 5
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # FastAPI Backend with enhanced logging
  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: development
    container_name: procurement-backend
    env_file:
      - .env
    environment:
      - DATABASE_URL=${DATABASE_URL:-postgresql://postgres:postgres@postgres:5432/procurement}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379}
      - MINIO_ENDPOINT=${MINIO_ENDPOINT:-minio:9000}
      - LOG_LEVEL=${LOG_LEVEL:-DEBUG}  # Set to DEBUG for development
      - PYTHONUNBUFFERED=1  # Ensures logs are displayed immediately
    ports:
      - "8000:8000"
    volumes:
      - ./backend:/app
      - backend_cache:/app/.cache
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - procurement-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 5
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "5"
        labels: "service=backend"

  # React Frontend
  frontend:
    build:
      context: ./frontend
      dockerfile: Dockerfile
      target: development
    container_name: procurement-frontend
    environment:
      - VITE_API_URL=${VITE_API_URL:-http://localhost:8000}
      - VITE_ENVIRONMENT=${VITE_ENVIRONMENT:-development}
    ports:
      - "5173:5173"
    volumes:
      - ./frontend:/app
      - frontend_node_modules:/app/node_modules
    depends_on:
      - backend
    networks:
      - procurement-network
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Celery Worker (for background tasks)
  celery-worker:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: development
    container_name: procurement-celery-worker
    command: celery -A app.core.celery worker --loglevel=info
    env_file:
      - .env
    environment:
      - DATABASE_URL=${DATABASE_URL:-postgresql://postgres:postgres@postgres:5432/procurement}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379}
      - PYTHONUNBUFFERED=1
    volumes:
      - ./backend:/app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - procurement-network
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Celery Beat (for scheduled tasks)
  celery-beat:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: development
    container_name: procurement-celery-beat
    command: celery -A app.core.celery beat --loglevel=info
    env_file:
      - .env
    environment:
      - DATABASE_URL=${DATABASE_URL:-postgresql://postgres:postgres@postgres:5432/procurement}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379}
      - PYTHONUNBUFFERED=1
    volumes:
      - ./backend:/app
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - procurement-network
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

  # Flower (Celery monitoring)
  flower:
    build:
      context: ./backend
      dockerfile: Dockerfile
      target: development
    container_name: procurement-flower
    command: celery -A app.core.celery flower --port=5555
    environment:
      - DATABASE_URL=${DATABASE_URL:-postgresql://postgres:postgres@postgres:5432/procurement}
      - REDIS_URL=${REDIS_URL:-redis://redis:6379}
      - PYTHONUNBUFFERED=1
    ports:
      - "5555:5555"
    depends_on:
      - redis
    networks:
      - procurement-network
    restart: unless-stopped
    logging:
      driver: "json-file"
      options:
        max-size: "10m"
        max-file: "3"

volumes:
  postgres_data:
  redis_data:
  minio_data:
  backend_cache:
  frontend_node_modules:

networks:
  procurement-network:
    driver: bridge
